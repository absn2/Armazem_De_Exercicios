----RESPOSTAS----

1)
    mmax :: (a->Int) -> a -> a -> a
    mmax f x y 
        | f x >= f y = x
        | otherwise = y

2)
countedSorted :: [String] -> Int
countedSorted x = length (filter (\n -> n == sort n) x)

3)
mStr :: [String] -> String
mStr x =  map toUpper (intercalate " " (filter (\n -> length(n) > 5) x))

4)
powers :: Int -> Int -> [Int]
powers x y = takeWhile (<= y) (map (\n -> x ^ n) [0..y]) 

5)
// Maneira Recomendada!
add :: Int -> Int -> Int
add x y = x + y

sumsOfAux :: [Int] -> (Int -> Int) -> [Int]
sumsOfAux [] _ = []
sumsOfAux (x:xs) f = f x : sumsOfAux xs (add (f x))

sumsOf :: [Int] -> [Int]
sumsOf x = sumsOfAux x $ add $ 0

//Utilizando funcoes e logica (Porém custoso tem que fazer busca na lista)
sumsOf x = map (\n -> sum(take (position n x 1) x)) x
    where
    position n (x:xs) i = if n /= x then position n xs (i+1) else i 

// função equivalente na biblioteca
sumsOf x = scanl1 (+) x 

6)
squares :: Int -> [Int]
squares x = take x (filter (\n -> head(show(n)) == last(show(n)))(map (\n -> n*n) [1..maxBound]))